import org.apache.tools.ant.taskdefs.condition.Os

def isDebugBuild() {
    !gradle.startParameter.taskNames.contains("uploadArchives") && VERSION_NAME.contains("SNAPSHOT")
}

def shouldAddFlavors() {
    def flavors = ['armeabi', 'armeabi-v7a', 'x86', 'mips', 'arm64-v8a', 'mips64', 'x86_64']
    boolean applyFlavors = false
    gradle.startParameter.taskNames.each() {
        String normalizedTaskName = it.toLowerCase(Locale.ROOT)
        flavors.each() {
            applyFlavors |= normalizedTaskName.contains(it)
        }
    }
    applyFlavors
}

def addFlavors() {
    android productFlavors {
        flavors.each() {
            String flavor = it
            "${it}" {
                ndk {
                    abiFilter flavor
                }
            }
        }
        fat
    }
}

def getNdkBuildCommand() {
    def command = "${android.ndkDirectory}/ndk-build"
    Os.isFamily(Os.FAMILY_WINDOWS) ? "${command}.cmd" : command
}

android {
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    def nativeSrcDir = file('src/main/jni').path

    task buildNative(type: Exec) {
        environment 'NDK_DEBUG', isDebugBuild() ? '1' : '0'
        commandLine getNdkBuildCommand(),
                '-C', nativeSrcDir,
                'all'
        outputs.dir file('src/main/libs')
        outputs.dir file('src/main/obj')
        inputs.dir nativeSrcDir
    }

    task cleanNative(type: Exec) {
        commandLine getNdkBuildCommand(),
                '-C', nativeSrcDir,
                'clean'
    }
    buildTypes.debug.jniDebuggable isDebugBuild()

    if (shouldAddFlavors()) {
        addFlavors()
    }
}

clean.dependsOn cleanNative

tasks.withType(JavaCompile) {
    it.dependsOn buildNative
}